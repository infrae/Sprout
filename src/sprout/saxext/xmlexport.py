"""
An XML exporter based on SAX events.
"""
from StringIO import StringIO
from xml.sax import saxutils

class BaseSettings:
    """Base class of settings sent to XML generation.

    Subclass this for custom settings objects.
    """
    def __init__(self, asDocument=True, outputEncoding='utf-8'):
        self._asDocument = asDocument
        self._outputEncoding = outputEncoding
        
    def asDocument(self):
        """Export XML as document with full prolog.
        """
        return self._asDocument
    
    def outputEncoding(self):
        """Encoding the document will be output as.
        """
        return self._outputEncoding

# null settings contains the default settings
NULL_SETTINGS = BaseSettings()

class XMLSourceRegistry:
    """Registers Content Types to XML Sources that generate Sax-events.
    """
    def __init__(self, default_namespace):
        self._mapping = {}
        self._fallback = None
        self._default_namespace = default_namespace
        self._namespaces = {}

    # MANIPULATORS
    
    def registerXMLSource(self, klass, xml_source):
        """Register an XML source for a class.

        klass - the class of the object we want to serialize as XML
        xml_source - the class of the XML source for it (subclass of
        BaseSource)
        """
        self._mapping[klass] = xml_source

    def registerNamespace(self, prefix, uri):
        """Register a namespace.

        prefix - prefix for namespace as will be shown in the XML
        uri - namespace URI
        """
        self._namespaces[prefix] = uri

    # ACCESSORS

    def xmlToString(self, context, settings=NULL_SETTINGS):
        """Convert context object to XML document as string.

        context - the object to convert to XML
        settings - optionally a settings object to configure export
        """
        f = StringIO()
        self.xmlToFile(context, f, settings)
        result = f.getvalue()
        f.close()
        return result

    def xmlToFile(self, context, file, settings=NULL_SETTINGS):
        """Convert context object write it to file object.

        context - the object to convert to XML
        file - a Python file object to write to
        settings - optionally a settings object to configure export
        """
        reader = saxutils.XMLGenerator(file, settings.outputEncoding())
        self.xmlToSax(context, reader, settings)

    def xmlToSax(self, context, reader, settings=NULL_SETTINGS):
        """Convert context object, generate sax events.

        context - the object to convert to XML
        reader - a SAX event handler
        settings - optionally a settings object to configure export
        """
        if settings.asDocument():
            reader.startDocument()
        if self._default_namespace is not None:
            reader.startPrefixMapping(None, self._default_namespace)
        for prefix, uri in self._namespaces.items():
            reader.startPrefixMapping(prefix, uri)
        self._getXMLSource(context, reader, settings).sax()
        if settings.asDocument():
            reader.endDocument()
        
    def getDefaultNamespace(self):
        """The default namespace for the XML generated by this registry.
        """
        return self._default_namespace

    # PRIVATE

    def _getXMLSource(self, context, reader, settings):
        """Create XML source for context, reader, settings.

        context - the object to represent as XML
        reader - a handler of SAX events
        settings - settings object configuring export
        """
        class_ = context.__class__
        xmlsource = self._mapping.get(class_, None)
        if xmlsource is None:
            raise XMLExportError, "Cannot find source for: %s" % class_
        return xmlsource(context, self, reader, settings)

class BaseSource:
    """Base class for XML sources.

    Subclass this to create an XML source.

    Override the sax method in your subclass. The sax method
    can use the following attributes and methods:

    context - the object being exported.
    reader - the SAX handler object, you can send arbitrary SAX events to it,
             such as startElementNS, endElementNS, characters, etc.
    startElement, endElement - convenient ways to generate element events
                               in default namespace.
    startElementNS, endElementNs - convenient way to generate element
                                   events in namespace.

    getXMLSource - to retrieve an XML source for a sub object.
    """
    def __init__(self, context, registry, reader, settings):
        self.context = context
        self._registry = registry
        self.reader = reader
        self._settings = settings
        
    def sax(self):
        """To be overridden in subclasses
        """
        raise NotImplemented

    def startElementNS(self, ns, name, attrs=None):
        """Start element event in the provided namespace.

        attrs - Optionally an attribute dictionary can be passed. This
        dictionary is a mapping from attribute names to attribute
        values. If an attribute name is a string, the attribute will
        be in no namespace (no namespace prefix). If the attribute
        name is a tuple, it must contain the namespace URI as the
        first element, the namespace name as the second element.
        """
        d = {}
        
        if attrs is not None:
            for key, value in attrs.items():
                # keep namespaced attributes
                if isinstance(key, tuple):
                    d[key] = value
                else:
                    d[(None, key)] = value

        self.reader.startElementNS(
            (ns, name),
            None,
            d)
        
    def endElementNS(self, ns, name):
        """End element event in the provided namespace.
        """
        self.reader.endElementNS(
            (ns, name),
            None)
    
    def startElement(self, name, attrs=None):
        """Start element event in the default namespace.

        attrs - see startElementNS.
        """
        self.startElementNS(self._registry.getDefaultNamespace(), name, attrs)
        
    def endElement(self, name):
        """End element event in the default namespace.
        """
        self.endElementNS(self._registry.getDefaultNamespace(), name)

    def getXMLSource(self, context):
        """Give the XML source for a particular context object.

        context - the context object to get the XML source for.
        """
        return self._registry._getXMLSource(
            context, self.reader, self._settings)

    def subsax(self, context):
        """Generate SAX events for context object.

        context - the context object (typically sub oject) to generate SAX
                  events for.
        """
        self.getXMLSource(context).sax()
                
# XXX backwards compatibility
BaseXMLSource = BaseSource
